
'/*
'開始
'*/

Function macroStart()

    With Application
    
        .Calculation = xlCalculationManual  '自動計算OFF
        .ScreenUpdating = False             '描画OFF
        .EnableEvents = False               'イベントOFF
        .Cursor = xlDefault                 'カーソルOFF
    
    End With

End Function _


'/*
'終了
'*/

Function macroEnd()

    With Application
    
        .Cursor = xlDefault                 'カーソルOFF
        .EnableEvents = False               'イベントOFF
        .ScreenUpdating = False             '描画OFF
        .Calculation = xlCalculationManual  '自動計算OFF
    
    End With

End Function _


Function deleteWorksheet(ws As Worksheet)

    Application.DisplayAlerts = False
    ws.Delete
    Application.DisplayAlerts = True

End Function _


Function deleteBook(wbPath As String)

    If Dir(wbPath) <> "" Then
        
        'Application.DisplayAlerts = False
        Kill wbPath
        'Application.DisplayAlerts = True
        
    Else
        
        MsgBox "存在なし:= [" & wbPath & "]"
        
    End If

End Function _


'/*
'ファイルの存在確認
'
'   @param  [String] filePath(参照ファイルのフルパス)
'
'   @return  [Boolean] 存在：True, なし：False
'*/

Function findFile(filePath As String) As Boolean

    On Error GoTo functionError

        Dim result As String
        result = Dir(filePath)
    
        If result = "" Then
            findFile = False
        Else
            findFile = True
        End If
    
        Exit Function
    
functionError:
    MsgBox "FunctionE:= [VBA]Tool.findFile"
    End
    
End Function _


'/*
'このbookの最後に指定した名称でシートを追加
'   ※同名のシートが存在する場合は先に削除'
'
'   @param  [String]指定するシート名
'
'   @return [Worksheet]追加したシートオブジェクト
'*/

Function addSheet(addSheetName As String) As Worksheet
    
    On Error GoTo functionError
    
            For Each Sheet In ThisWorkbook.Worksheets
            
                If Sheet.name = addSheetName Then
                    
                    deleteWorksheet ThisWorkbook.Worksheets(addSheetName)
                    Exit For
                    
                End If
                
            Next
        
        With ThisWorkbook.Worksheets
        
            Dim ws As Worksheet
        
            Set ws = .Add(after:=.Item(.Count))
            ws.name = addSheetName
            
            Set addSheet = ws
            
        End With
        
        Exit Function
        
functionError:
    MsgBox "functionE:= [VBA]Tool.addSheet"
    End
    
End Function _


'/*
'対象Bookが開いているか確認
'
'   @param  [String]対象ファイルのパス
'
'   @return [Boolean]開いていなければTrue
'*/

Function isBookOpend(ByVal bookPath As String) As Boolean

    On Error Resume Next
    
        Open bookPath For Append As #1
        Close #1
        
        If Err.Number > 0 Then
        
            isBookOpend = True
            
        Else
        
            isBookOpend = False
            
        End If

End Function _


'/*
'選択したファイルのパスを取得する
'
'   @param  [String]選択させるファイルの種類
'
'   @return [String]指定したファイルのパス
'*/

Function getPathSelectFile(ByVal selectFileType As String) As String

    Dim objDialog As FileDialog
    Set objDialog = Application.FileDialog(msoFileDialogFilePicker)
    Dim folderPath As String
    folderPath = ThisWorkbook.Path

    With objDialog
    
        .AllowMultiSelect = False
        .InitialFileName = folderPath
        .Title = [selectFileType] & "を選択してください"
        
        If .Show Then
        
            getPathSelectFile = .SelectedItems(1)
            
        Else
        
            Exit Function
        
        End If
    
    End With

End Function _


'/*
'このworkbook以外のbookを閉じる
'   ※上書き保存しない
'*/

Function closeAllWorkbook()

    Dim wb As Workbook

    For Each wb In Workbooks
    
        If Not wb.name = ThisWorkbook.name Then
        
            wb.Close SaveChanges:=False
            
        End If
        
    Next

End Function _


'/*
'文字の角度を変更する
'
'   @param  [Range]変更箇所
'   @param  [Integer]角度
'
'*/

Function setRaneAngle(ByVal setRange As Range, ByVal angle As Integer)

    setRange.Orientation = angle

End Function _


'/*
'文字を縦書きにする
'
'   @param  [Range]変更箇所
'
'*/

Function setRangeVertical(ByVal setRange As Range)

    setRange.Orientation = xlVertical

End Function _


'/*
'指定Rangeからの最終行を取得する
'
'   @param  [Worksheet]対象のシート
'   @param  [Range]始点
'
'   @return [Lomg]最終行
'*/

Function getLastRow(startRange As Range) As Long

    getLastRow = startRange.SpecialCells(xlLastCell).row
    'getLastRow = startRange.End(xlDown).row

End Function _


'/*
'指定Rangeからの最終列を取得する
'
'   @param  [Worksheet]対象のシート
'   @param  [Range]始点
'
'   @return [Lomg]最終列
'*/

Function getLastColumn(startRange As Range) As Long

    getLastColumn = startRange.SpecialCells(xlLastCell).column
    'getLastColumn = startRange.End(xlToRight).Column

End Function _


'/*
'すべてのシートでRange("A1")を指定後、1シート目を選択してブックを保存する
'*/

Sub setA1()
  Dim ws As Worksheet
  For Each ws In Worksheets
    ws.Select
    ws.Range("A1").Select
  Next
  Sheets(1).Select
  
  ThisWorkbook.Save
End Sub _


'/*
'行で対象が何列目にいるか検索する
'
'   @param  [String]検索対象
'                  [Range]検索範囲(行)
'
'   @return  [Integer]列数
'*/

Function findValueColumn(ByVal vSearchText As String, ByVal vRows As Range) As Integer

    On Error GoTo Error
    
        Dim col As Integer
        col = vRows.Find(vSearchText, LookAt:=xlWhole, SearchOrder:=xlByColumns).column
        findValueColumn = col

Error:
    findValueColumn = 0
    
End Function _


'/*
'列で対象が何行目にいるか検索する
'
'   @param  [String]検索対象
'                  [Range]検索範囲(列)
'
'   @return  [Integer]行数
'*/

Function findValueRow(ByVal vSearchText As String, ByVal vColumns As Range) As Integer

    On Error GoTo Error
    
        Dim row As Integer
        row = vColumns.Find(vSearchText, LookAt:=xlWhole, SearchOrder:=xlByRows).row
        findValueRow = row

Error:
    findValueRow = 0
    
End Function



'/*
'２つのRangeを比較して同じサイズか判定する
'
'   @param  [Range]比較対象A
'                  [Range]比較対象B
'
'   @return  [Boolean]比較結果
'*/

Function compareSize(rangeA As Range, rangeB As Range) As Boolean
    
    Dim compareRows As Boolean
    compareRows = False
    If rangeA.Rows.Count = rangeB.Rows.Count Then compareRows = True

    Dim compareColumns As Boolean
    compareColumns = False
    If rangeA.Columns.Count = rangeB.Columns.Count Then compareColumns = True
    
    If compareRow And compareColumns Then
        compareSize = True
    Else
        compareSize = False
    End If

End Function _


'/*
'Range範囲の大きさが同じだったら値をコピーする
'
'   @param  [Range]コピー元
'                  [Range]コピー先
'
'*/

Function copyValue(fromRange As Range, toRange As Range)

    If compareSize(fromRange, toRange) Then
        toRange.Value = fromRange.Value
    Else
        Exit Function
    End If

End Function _


'/*
'シートを指定したBookの最後にコピーする
'
'   @param  [Worksheet]コピー元
'                  [Workbook]コピー先
'
'*/

Function copySheet(fromWS As Worksheet, toWB As Workbook)

    With toWB.Worksheets
    fromWS.Copy after:=.Item(.Count)
    End With

End Function _


'/*
'コピーした際に利用するクリップボードを初期化する
'*/

Function clearClipBoard()

    Application.CutCopyMode = False

End Function

'/*
'正規表現オブジェクト
'*/

Function RegExp() As Variant

    Dim re As Object
    Set re = CreateObject("VBScript.RegExp")
    With re
        .Pattern = "[0-9]"      '文字パターン
        .IgnoreCase = False   '大文字と小文字を区別するか[False]、しないか[True]
        .Global = True           '文字列全体を検索するか[True]、しないか[False]
    RegExp = re
    
    'Dim str1 as String, str2 as String
    'str1 = "東京1大阪2名古屋3"
    'str2 = reg.Replace(str1, ",")
    '
    'Debug.Print str2
    
    
    
    'Dim Matches
    'Set matches = re.Execute(str)
    '
    'Dim msg As String
    'For Each match In matches
    '   msg = msg & match.Value & "が" & match.FirstIndex &  "文字目に見つかりました"　& vbCrLf
    'Next Match
    '
    'MsgBox msg
    
    
    
    'Dim str As String
    'str = "1"
    'If re.Test(str) then MsgBox "指定したパターンが含まれています"
    
End Function

